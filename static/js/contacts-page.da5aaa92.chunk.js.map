{"version":3,"file":"static/js/contacts-page.da5aaa92.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selector.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","redux/filter/filter-selector.js","components/UpdateForm/UpdateForm.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactItem.jsx","pages/ContactsPage/ContactsPage.jsx","utils/ValidateForm.js"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts-selector';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operation';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { ValidateContactForm } from '../../utils/ValidateForm';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Box,\n  useToast,\n} from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast()\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={ValidateContactForm}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        const nameMatch = contacts.find(({ name }) => {\n          return name.toLowerCase() === values.name.toLowerCase();\n        });\n        nameMatch\n          ? toast({\n              position: 'top',\n              title: `${values.name} is already in contacts!`,\n              status: 'warning',\n              isClosable: true,\n            })\n          : dispatch(addContact(values));\n        values = { name: '', number: '' };\n        resetForm();\n        setSubmitting(false);\n      }}\n    >\n      <Box p={2}>\n        <Box my={4} textAlign=\"left\">\n          <FormControl as={Form}>\n            <FormLabel\n              fontFamily=\"cursive\"\n              fontSize=\"md\"\n              fontWeight=\"semibold\"\n              color=\"purple.800\"\n            >\n              Name:\n              <Input\n                as={Field}\n                focusBorderColor=\"purple.400\"\n                errorBorderColor=\"crimson\"\n                bg=\"blackAlpha.100\"\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              />\n            </FormLabel>\n            <ErrorMessage name=\"name\" />\n            <FormLabel\n              mt={6}\n              fontFamily=\"cursive\"\n              fontSize=\"md\"\n              fontWeight=\"semibold\"\n              color=\"purple.800\"\n            >\n              Number:\n              <Input\n                as={Field}\n                focusBorderColor=\"purple.400\"\n                errorBorderColor=\"crimson\"\n                bg=\"blackAlpha.100\"\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              />\n            </FormLabel>\n            <ErrorMessage name=\"number\" />\n            <Button\n              type=\"submit\"\n              colorScheme=\"purple\"\n              variant=\"solid\"\n              width=\"full\"\n              mt={4}\n            >\n              Add Contact\n            </Button>\n          </FormControl>\n        </Box>\n      </Box>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlise';\nimport { FormLabel, Input } from '@chakra-ui/react';\n\n// import { FilterLable, FilterInput } from \"./Filter.styled\"\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const chengeFilter = event => {\n    dispatch(setFilter(event.target.value));\n  };\n  return (\n    <FormLabel\n      fontFamily=\"cursive\"\n      fontSize=\"md\"\n      fontWeight=\"semibold\"\n      color=\"purple.800\"\n      textAlign=\"center\"\n      maxWidth=\"300px\"\n      mt=\"10\"\n    >\n      Find contacts by name\n      <Input\n        border=\"1px\"\n        borderColor=\"purple.300\"\n        focusBorderColor=\"purple.400\"\n        mt=\"2\"\n        errorBorderColor=\"crimson\"\n        bg=\"blackAlpha.200\"\n        type=\"text\"\n        onChange={chengeFilter}\n      />\n    </FormLabel>\n  );\n};\n","export const selectFilter = state => state.filter.filter;\n","import { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contacts-operation';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { ValidateContactForm } from '../../utils/ValidateForm';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n} from '@chakra-ui/react';\nimport { FaEdit } from 'react-icons/fa';\n\nexport const UpdateForm = ({ userToUpdate, clousForm }) => {\n  const dispatch = useDispatch();\n  return (\n    <Formik\n      initialValues={{ name: userToUpdate.name, number: userToUpdate.number }}\n      validationSchema={ValidateContactForm}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        dispatch(updateContact({...userToUpdate, ...values}))\n        resetForm();\n        setSubmitting(false);\n        clousForm();\n      }}\n    >\n      <FormControl as={Form}>\n        <FormLabel fontFamily=\"cursive\"\n              fontSize=\"md\"\n              fontWeight=\"semibold\"\n              color=\"purple.800\">\n          Name:\n          <Input as={Field}\n            focusBorderColor=\"purple.400\"\n                errorBorderColor=\"crimson\"\n                bg=\"blackAlpha.100\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n        </FormLabel>\n        <ErrorMessage name=\"name\" />\n        <FormLabel fontFamily=\"cursive\"\n              fontSize=\"md\"\n              fontWeight=\"semibold\"\n              color=\"purple.800\">\n          Number:\n          <Input as={Field}\n            focusBorderColor=\"purple.400\"\n                errorBorderColor=\"crimson\"\n                bg=\"blackAlpha.100\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n        </FormLabel>\n        <ErrorMessage name=\"name\" />\n        <Button\n              leftIcon={<FaEdit />}\n              colorScheme=\"purple\"\n              variant=\"solid\"\n              mt={2} type=\"submit\">Update</Button>\n      </FormControl>\n    </Formik>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operation';\nimport { selectContacts } from 'redux/contacts/contacts-selector';\nimport { selectFilter } from 'redux/filter/filter-selector';\nimport { ContactItem } from './ContactItem';\nimport { List, SimpleGrid } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const [userToUpdate, setUserToUpdate] = useState(null);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const visibleContacts = getVisibleContatcts();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  function getVisibleContatcts() {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n  }\n  const showUpdateForm = userId => {\n    const contact = contacts.find(({ id }) => id === userId);\n    setUserToUpdate(contact);\n  };\n  const clousForm = () => {\n    setUserToUpdate(null);\n  };\n\n  return (\n    <>\n      {contacts.length !== 0 && visibleContacts.length !== 0 && (\n        <List tm=\"10\">\n          <SimpleGrid\n            p=\"10px\"\n            w=\"100%\"\n            maxW=\"1200px\"\n            spacing=\"10px\"\n            columns={[1, 1, 2, 2, 3]}\n            justifyContent=\"center\"\n          >\n            {visibleContacts.map(contact =>\n              ContactItem(contact, showUpdateForm, userToUpdate, clousForm)\n            )}\n          </SimpleGrid>\n        </List>\n      )}\n    </>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operation';\nimport { UpdateForm } from 'components/UpdateForm/UpdateForm';\nimport {\n  Card,\n  Avatar,\n  ListItem,\n  IconButton,\n  CardBody,\n  CardFooter,\n  Text,\n  Flex,\n  Box,\n} from '@chakra-ui/react';\nimport { FaEdit } from 'react-icons/fa';\nimport { RiDeleteBin2Fill } from 'react-icons/ri';\n\nexport const ContactItem = (\n  { id, name, number },\n  showUpdateForm,\n  userToUpdate,\n  clousForm\n) => {\n  const dispatch = useDispatch();\n  return (\n    <ListItem key={id}>\n      <Card overflow=\"hidden\" variant=\"outline\" boxShadow=\"lg\">\n        <CardBody\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          flexDirection={['column', 'column', null, 'row', null]}\n          gap=\"3\"\n        >\n          <Avatar name={name} size=\"sm\" />\n          <Box display=\"block\">\n            <Flex alignItems=\"baseline\" gap=\"1\">\n              <Text\n                fontFamily=\"cursive\"\n                fontSize=\"sm\"\n                fontWeight=\"semibold\"\n                color=\"purple.800\"\n              >\n                Name:\n              </Text>\n              <Text\n                fontFamily=\"cursive\"\n                fontSize=\"sm\"\n                fontWeight=\"semibold\"\n                color=\"pink.800\"\n              >\n                {name}\n              </Text>\n            </Flex>\n            <Flex alignItems=\"baseline\" gap=\"1\">\n              <Text\n                fontFamily=\"cursive\"\n                fontSize=\"sm\"\n                fontWeight=\"semibold\"\n                color=\"purple.800\"\n              >\n                Phone:\n              </Text>\n              <Text\n                fontFamily=\"cursive\"\n                fontSize=\"sm\"\n                fontWeight=\"semibold\"\n                color=\"pink.800\"\n              >\n                {number}\n              </Text>\n            </Flex>\n          </Box>\n          <Flex alignItems=\"center\" gap=\"1\">\n            <IconButton\n              aria-label=\"Update contact\"\n              icon={<FaEdit size=\"25px\" />}\n              color=\"purple.800\"\n              _hover={{ color: 'pink.600' }}\n              variant=\"outline\"\n              border=\"none\"\n              type=\"button\"\n              onClick={() => showUpdateForm(id)}\n            />\n            <IconButton\n              aria-label=\"Delete contact\"\n              icon={<RiDeleteBin2Fill size=\"25px\" />}\n              color=\"purple.800\"\n              _hover={{ color: 'pink.600' }}\n              variant=\"outline\"\n              border=\"none\"\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n            />\n          </Flex>\n        </CardBody>\n        {userToUpdate && userToUpdate.id === id && (\n          <CardFooter>\n            <UpdateForm userToUpdate={userToUpdate} clousForm={clousForm} />\n          </CardFooter>\n        )}\n      </Card>\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  showUpdateForm: PropTypes.func.isRequired,\n  userToUpdate: PropTypes.func.isRequired,\n  clousForm: PropTypes.func.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/contacts-selector';\nimport { ContactForm } from 'components/ContactForm/ContactForm'; \nimport { Filter } from 'components/Filter/Filter'; \nimport { ContactList } from 'components/ContactList/ContactList'; \nimport { Box, Flex, Spinner } from '@chakra-ui/react';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  \n  return (\n<Flex width=\"full\" align=\"center\" justifyContent=\"center\" flexDirection='column'>\n      <Box\n        p={8}\n        maxWidth=\"400px\"\n        bg=\"purple.200\"\n        borderWidth={1}\n        borderRadius={8}\n        boxShadow=\"lg\"\n      >\n      <ContactForm />\n        </Box>\n           \n      <Filter />\n        {isLoading && <Spinner color=\"purple.800\" size='xl' />}\n        <ContactList />\n        </Flex>\n  );\n};\n\nexport default ContactsPage;","import * as Yup from 'yup';\nimport { toast } from 'react-toastify';\n\nexport const ValidateContactForm = Yup.object({\n  name: Yup.string()\n    .max(20, () => toast.warn('Must be 20 characters or less'))\n    .required('Required'),\n  number: Yup.string()\n    .max(12, () => toast.warn('Must be 12 digits or less'))\n    .required('Required'),\n});\n\nexport const ValidateRegisterForm = Yup.object({\n  name: Yup.string()\n    .max(20, () => toast.warn('Must be 20 characters or less'))\n    .required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string().required('Required'),\n});\n\nexport const ValidateLoginForm = Yup.object({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string().required('Required'),\n});\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","ContactForm","useSelector","dispatch","useDispatch","toast","useToast","initialValues","name","number","validationSchema","ValidateContactForm","onSubmit","values","setSubmitting","resetForm","find","toLowerCase","position","title","status","isClosable","addContact","p","my","textAlign","as","Form","fontFamily","fontSize","fontWeight","color","I","Field","focusBorderColor","errorBorderColor","bg","type","pattern","mt","colorScheme","variant","width","Filter","maxWidth","border","borderColor","onChange","event","setFilter","target","value","selectFilter","filter","UpdateForm","userToUpdate","clousForm","updateContact","leftIcon","ContactList","useState","setUserToUpdate","visibleContacts","normalizedFilter","toLocaleLowerCase","contact","includes","getVisibleContatcts","useEffect","fetchContacts","showUpdateForm","userId","id","length","tm","w","maxW","spacing","columns","justifyContent","map","overflow","boxShadow","display","alignItems","flexDirection","gap","size","icon","_hover","onClick","deleteContact","ContactItem","align","borderWidth","borderRadius","Yup","max","required","ValidateRegisterForm","email","password","ValidateLoginForm"],"sourceRoot":""}