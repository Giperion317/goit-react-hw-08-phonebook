{"version":3,"file":"static/js/login-page.7aacfcac.chunk.js","mappings":"gUAeaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KACd,OACE,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,iBAAkBC,EAAAA,GAClBC,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCZ,GAASa,EAAAA,EAAAA,IAAMH,IAASI,MAAK,YAAe,EAAZC,MAE5Bb,EAAM,CACJc,SAAU,MACVC,MAAO,iDACPC,OAAQ,QACRC,YAAY,IAIhBjB,EAAM,CACJc,SAAU,MACVC,MAAM,sCACNC,OAAQ,UACRC,YAAY,GAEf,IACDP,IACAD,GAAc,EACf,EAvBH,UAyBE,UAAC,KAAD,CAAKS,EAAG,EAAR,WACE,SAAC,KAAD,CAAKC,UAAU,SAAf,UACE,SAAC,IAAD,CACEC,WAAW,UACXC,SAAS,MACTC,WAAW,WACXC,MAAM,aAJR,sBASF,SAAC,KAAD,CAAKC,GAAI,EAAGL,UAAU,OAAtB,UACE,UAAC,KAAD,CAAaM,GAAIC,EAAAA,GAAjB,WACE,UAAC,IAAD,CACEN,WAAW,UACXC,SAAS,KACTC,WAAW,WACXC,MAAM,aAJR,oBAOE,SAAC,EAAAI,EAAD,CACEF,GAAIG,EAAAA,GACJC,iBAAiB,aACjBC,iBAAiB,UACjBC,GAAG,iBACHC,KAAK,QACLC,KAAK,cAGT,SAAC,KAAD,CAAcA,KAAK,WACnB,UAAC,IAAD,CACEC,GAAI,EACJd,WAAW,UACXC,SAAS,KACTC,WAAW,WACXC,MAAM,aALR,uBAQE,SAAC,EAAAI,EAAD,CACEF,GAAIG,EAAAA,GACJC,iBAAiB,aACjBC,iBAAiB,UACjBC,GAAG,iBACHC,KAAK,WACLC,KAAK,iBAGT,SAAC,KAAD,CAAcA,KAAK,aACnB,SAAC,IAAD,CACED,KAAK,SACLG,UAAU,SAAC,MAAD,IACVC,YAAY,SACZC,QAAQ,QACRC,MAAM,OACNJ,GAAI,EANN,8BAeX,E,SCxGYK,EAAY,WACvB,OACE,SAAC,IAAD,CAAMD,MAAM,OAAOE,MAAM,SAASC,eAAe,SAAjD,UACE,SAAC,KAAD,CACEvB,EAAG,EACHwB,SAAS,QACTX,GAAG,aACHY,YAAa,EACbC,aAAc,EACdC,UAAU,KANZ,UAQE,SAAChD,EAAD,OAIP,C,gICfYiD,EAAsBC,EAAAA,GAAW,CAC5Cd,KAAMc,EAAAA,KACHC,IAAI,IAAI,kBAAMhD,EAAAA,GAAAA,KAAW,gCAAjB,IACRiD,SAAS,YACZC,OAAQH,EAAAA,KACLC,IAAI,IAAI,kBAAMhD,EAAAA,GAAAA,KAAW,4BAAjB,IACRiD,SAAS,cAGDE,EAAuBJ,EAAAA,GAAW,CAC7Cd,KAAMc,EAAAA,KACHC,IAAI,IAAI,kBAAMhD,EAAAA,GAAAA,KAAW,gCAAjB,IACRiD,SAAS,YACZ9C,MAAO4C,EAAAA,KAAa5C,MAAM,yBAAyB8C,SAAS,YAC5D7C,SAAU2C,EAAAA,KAAaE,SAAS,cAGrB3C,EAAoByC,EAAAA,GAAW,CAC1C5C,MAAO4C,EAAAA,KAAa5C,MAAM,yBAAyB8C,SAAS,YAC5D7C,SAAU2C,EAAAA,KAAaE,SAAS,a","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","utils/ValidateForm.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { login } from 'redux/auht/auth-operations';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { ValidateLoginForm } from '../../utils/ValidateForm';\nimport {\n  Heading,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Box,\n  useToast,\n} from '@chakra-ui/react';\nimport { TbLogin } from 'react-icons/tb';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const toast = useToast();\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={ValidateLoginForm}\n      onSubmit={(values, { setSubmitting, resetForm }) => {\n        dispatch(login(values)).then(({ error }) => {\n          if (error) {\n            toast({\n              position: 'top',\n              title: 'Incorrect email or password, please try again!',\n              status: 'error',\n              isClosable: true,\n            });\n            return;\n          }\n          toast({\n            position: 'top',\n            title: `Congratulations, you are logged in!`,\n            status: 'success',\n            isClosable: true,\n          });\n        });\n        resetForm();\n        setSubmitting(false);\n      }}\n    >\n      <Box p={2}>\n        <Box textAlign=\"center\">\n          <Heading\n            fontFamily=\"cursive\"\n            fontSize=\"2xl\"\n            fontWeight=\"semibold\"\n            color=\"purple.800\"\n          >\n            Login\n          </Heading>\n        </Box>\n        <Box my={4} textAlign=\"left\">\n          <FormControl as={Form}>\n            <FormLabel\n              fontFamily=\"cursive\"\n              fontSize=\"md\"\n              fontWeight=\"semibold\"\n              color=\"purple.800\"\n            >\n              Email:\n              <Input\n                as={Field}\n                focusBorderColor=\"purple.400\"\n                errorBorderColor=\"crimson\"\n                bg=\"blackAlpha.100\"\n                type=\"email\"\n                name=\"email\"\n              />\n            </FormLabel>\n            <ErrorMessage name=\"email\" />\n            <FormLabel\n              mt={6}\n              fontFamily=\"cursive\"\n              fontSize=\"md\"\n              fontWeight=\"semibold\"\n              color=\"purple.800\"\n            >\n              Password:\n              <Input\n                as={Field}\n                focusBorderColor=\"purple.400\"\n                errorBorderColor=\"crimson\"\n                bg=\"blackAlpha.100\"\n                type=\"password\"\n                name=\"password\"\n              />\n            </FormLabel>\n            <ErrorMessage name=\"pasword\" />\n            <Button\n              type=\"submit\"\n              leftIcon={<TbLogin />}\n              colorScheme=\"purple\"\n              variant=\"solid\"\n              width=\"full\"\n              mt={4}\n            >\n              Sign In\n            </Button>\n          </FormControl>\n        </Box>\n      </Box>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Box, Flex } from '@chakra-ui/react';\n\nexport const LoginPage = () => {\n  return (\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n      <Box\n        p={8}\n        maxWidth=\"500px\"\n        bg=\"purple.200\"\n        borderWidth={1}\n        borderRadius={8}\n        boxShadow=\"lg\"\n      >\n        <LoginForm />\n      </Box>\n    </Flex>\n  );\n};\n","import * as Yup from 'yup';\nimport { toast } from 'react-toastify';\n\nexport const ValidateContactForm = Yup.object({\n  name: Yup.string()\n    .max(20, () => toast.warn('Must be 20 characters or less'))\n    .required('Required'),\n  number: Yup.string()\n    .max(12, () => toast.warn('Must be 12 digits or less'))\n    .required('Required'),\n});\n\nexport const ValidateRegisterForm = Yup.object({\n  name: Yup.string()\n    .max(20, () => toast.warn('Must be 20 characters or less'))\n    .required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string().required('Required'),\n});\n\nexport const ValidateLoginForm = Yup.object({\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string().required('Required'),\n});\n"],"names":["LoginForm","dispatch","useDispatch","toast","useToast","initialValues","email","password","validationSchema","ValidateLoginForm","onSubmit","values","setSubmitting","resetForm","login","then","error","position","title","status","isClosable","p","textAlign","fontFamily","fontSize","fontWeight","color","my","as","Form","I","Field","focusBorderColor","errorBorderColor","bg","type","name","mt","leftIcon","colorScheme","variant","width","LoginPage","align","justifyContent","maxWidth","borderWidth","borderRadius","boxShadow","ValidateContactForm","Yup","max","required","number","ValidateRegisterForm"],"sourceRoot":""}